type Order {
  # Decided chefId and customerId won't resolve to user info
  _id: ID!
  chefId: ID!
  customerId: ID!
  cart: [OrderedDish!]!
  status: OrderStatus!
  date: String!
  cashTotal: Int!
  orderInstructions: String
}

type OrderedDish {
  dishId: ID!
  orderCount: Int!
}



 # OrderStatus codes/messages
  # 0: "Pending"
  # 1: "Accepted"
  # 2: "Completed"
  # 3: "Canceled"
  # 4: "Reviewed"

type OrderStatus {
  statusCode: Int!
  statusMessage: String!
}

type OrderResponsePayload {
  status: ServerResponse,
  payload: [Order!]!
}

input OrderStatusInput {
  statusCode: Int!
  statusMessage: String!
}

input OrderedDishInput {
  dishId: ID!
  orderCount: Int!
}

# New incoming order should have cart array of dishIDs.
input IncomingOrder {
  chefId: ID!
  customerId: ID!
  cart: [OrderedDishInput!]!
  status: OrderStatusInput!
  # date on IncomingOrder is optional, default set by Database.
  date: String
  orderInstructions: String!
}



extend type Query {
  # callerType of 'Customer' or 'Chef' determines whether to use callerID to query chefId or customerId in DB schema
  getOrdersByStatus(callerID: ID!, callerType: String!, statusCode: Int!): [Order]! 
}

extend type Mutation {
  """
  Order Workflow

  1) Post a New Order
  
    Server takes incoming OrderedDishInput objects from cart, decrements each dish quantity, and tabulates cashTotal in postNewOrder. Essentially, the Server is the single source of truth, processing incoming requests and updating dish availability in the database. Response is a ServerResponse to the Customer informing their order is waiting approval.

    For Orders, there is a one to one mapping between a User and a Chef. A User's Order will never have dishes from other local Chefs in the neighborhood. 

  """
  postNewOrder(incomingOrder: IncomingOrder!): OrderResponsePayload!

  updateOrder(orderID: ID!, statusCode: Int!): [Order]!
}


 # OrderStatus codes/messages
  # 0: "Pending"
  # 1: "Accepted"
  # 2: "Completed"
  # 3: "Canceled"
  # 4: "Reviewed"

# Todo: Implement Socket.io
# socket.io: alertChef
# socket.io: alertCustomer
